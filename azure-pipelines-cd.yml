trigger:
  branches:
    include:
    - main

variables:
- name: DOCKER_REGISTRY
  value: 'docker.io'
- name: DOCKER_IMAGE_NAME
  value: 'solar-system'
- name: DOCKER_IMAGE_TAG
  value: '$(Build.BuildNumber)'
- name: DOCKERHUB_USERNAME
  value: 'moheie'
- name: DOCKER_IMAGE
  value: '$(DOCKERHUB_USERNAME)/$(DOCKER_IMAGE_NAME):latest'
- name: EKS_CLUSTER_NAME
  value: 'solar-system-cluster'
- name: AWS_REGION
  value: 'us-west-2'
- name: KUBERNETES_NAMESPACE
  value: 'default'

pool:
  # Use self-hosted agent pool
  name: 'Default'  # Change this to your self-hosted agent pool name
  # Alternative: specify specific agent
  # demands:
  #   - agent.name -equals YourAgentName

stages:
- stage: Deploy
  displayName: 'Deploy to AWS EKS'
  jobs:
  - job: DeployToEKS
    displayName: 'Deploy Solar System App to EKS'
    steps:
    
    # Install required tools
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.x'
        addToPath: true
      displayName: 'Setup Python'

    - powershell: |
        Write-Host "Checking required tools..." -ForegroundColor Green
        
        # Check AWS CLI
        try {
          $awsVersion = aws --version 2>&1
          Write-Host "‚úÖ AWS CLI found: $awsVersion" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå AWS CLI not found. Please install it manually:" -ForegroundColor Red
          Write-Host "Download from: https://aws.amazon.com/cli/" -ForegroundColor Yellow
          Write-Host "Or install via Chocolatey: choco install awscli" -ForegroundColor Yellow
          exit 1
        }
        
        # Check kubectl
        try {
          $kubectlVersion = kubectl version --client --output=yaml 2>&1
          Write-Host "‚úÖ kubectl found" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå kubectl not found. Please install it manually:" -ForegroundColor Red
          Write-Host "Download from: https://kubernetes.io/docs/tasks/tools/" -ForegroundColor Yellow
          Write-Host "Or install via Chocolatey: choco install kubernetes-cli" -ForegroundColor Yellow
          exit 1
        }
        
        Write-Host "‚úÖ All required tools are available" -ForegroundColor Green
      displayName: 'Install/Verify AWS CLI and kubectl'

    # Configure AWS credentials
    - powershell: |
        Write-Host "Configuring AWS credentials..." -ForegroundColor Green
        aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
        aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
        aws configure set default.region $(AWS_REGION)
        aws configure set default.output json
        
        # Verify credentials
        try {
          $identity = aws sts get-caller-identity | ConvertFrom-Json
          Write-Host "‚úÖ AWS credentials configured for account: $($identity.Account)" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå Failed to verify AWS credentials" -ForegroundColor Red
          exit 1
        }
      displayName: 'Configure AWS Credentials'
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)

    # Update kubeconfig for EKS
    - powershell: |
        Write-Host "Configuring kubectl for EKS..." -ForegroundColor Green
        aws eks update-kubeconfig --region $(AWS_REGION) --name $(EKS_CLUSTER_NAME)
        
        Write-Host "Current context:" -ForegroundColor Cyan
        kubectl config current-context
        
        Write-Host "Cluster nodes:" -ForegroundColor Cyan
        kubectl get nodes
      displayName: 'Configure kubectl for EKS'

    # Verify cluster connectivity
    - powershell: |
        Write-Host "Testing cluster connectivity..." -ForegroundColor Green
        kubectl cluster-info
        kubectl get namespaces
      displayName: 'Verify EKS Cluster Access'

    # Update deployment manifest with current image
    - powershell: |
        Write-Host "Updating deployment manifests with pipeline variables..." -ForegroundColor Green
        
        # Update deployment.yaml
        Write-Host "Processing deployment.yaml..." -ForegroundColor Yellow
        $deploymentContent = Get-Content kubernetes/development/deployment.yaml -Raw
        $deploymentContent = $deploymentContent -replace '\$\{NAMESPACE\}', '$(KUBERNETES_NAMESPACE)'
        $deploymentContent = $deploymentContent -replace '\$\{REPLICAS\}', '3'
        $deploymentContent = $deploymentContent -replace '\$\{K8S_IMAGE\}', '$(DOCKER_IMAGE)'
        $deploymentContent | Set-Content kubernetes/development/deployment.yaml
        
        # Update service.yaml
        Write-Host "Processing service.yaml..." -ForegroundColor Yellow
        $serviceContent = Get-Content kubernetes/development/service.yaml -Raw
        $serviceContent = $serviceContent -replace '\$\{NAMESPACE\}', '$(KUBERNETES_NAMESPACE)'
        $serviceContent | Set-Content kubernetes/development/service.yaml
        
        # Update ingress.yaml
        Write-Host "Processing ingress.yaml..." -ForegroundColor Yellow
        $ingressContent = Get-Content kubernetes/development/ingress.yaml -Raw
        $ingressContent = $ingressContent -replace '\$\{NAMESPACE\}', '$(KUBERNETES_NAMESPACE)'
        $ingressContent = $ingressContent -replace '\$\{INGRESS_IP\}', 'localhost'
        $ingressContent | Set-Content kubernetes/development/ingress.yaml
        
        Write-Host "Updated manifest contents:" -ForegroundColor Cyan
        Write-Host "=== deployment.yaml ===" -ForegroundColor Cyan
        Get-Content kubernetes/development/deployment.yaml
        Write-Host "`n=== service.yaml ===" -ForegroundColor Cyan
        Get-Content kubernetes/development/service.yaml
        Write-Host "`n=== ingress.yaml ===" -ForegroundColor Cyan
        Get-Content kubernetes/development/ingress.yaml
      displayName: 'Update Deployment Manifest'

    # Deploy to Kubernetes
    - powershell: |
        Write-Host "Deploying to namespace: $(KUBERNETES_NAMESPACE)" -ForegroundColor Green
        kubectl apply -f kubernetes/development/deployment.yaml -n $(KUBERNETES_NAMESPACE)
        kubectl apply -f kubernetes/development/service.yaml -n $(KUBERNETES_NAMESPACE)
        kubectl apply -f kubernetes/development/ingress.yaml -n $(KUBERNETES_NAMESPACE)
      displayName: 'Deploy Kubernetes Manifests'

    # Wait for deployment rollout
    - powershell: |
        Write-Host "Waiting for deployment to be ready..." -ForegroundColor Green
        kubectl rollout status deployment/solar-system -n $(KUBERNETES_NAMESPACE) --timeout=300s
        kubectl get pods -l app=solar-system -n $(KUBERNETES_NAMESPACE)
      displayName: 'Wait for Deployment'

    # Get service endpoints
    - powershell: |
        Write-Host "Getting service information..." -ForegroundColor Green
        kubectl get services -n $(KUBERNETES_NAMESPACE)
        kubectl get ingress -n $(KUBERNETES_NAMESPACE)
        
        # Get LoadBalancer external IP
        Write-Host "Waiting for LoadBalancer external IP..." -ForegroundColor Yellow
        for ($i=1; $i -le 10; $i++) {
          $EXTERNAL_IP = kubectl get service solar-system -n $(KUBERNETES_NAMESPACE) -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
          if (![string]::IsNullOrEmpty($EXTERNAL_IP)) {
            Write-Host "##vso[task.setvariable variable=EXTERNAL_IP;isOutput=true]$EXTERNAL_IP"
            Write-Host "Application will be available at: http://$EXTERNAL_IP" -ForegroundColor Green
            break
          }
          Write-Host "Waiting for external IP... (attempt $i/10)" -ForegroundColor Yellow
          Start-Sleep 30
        }
        
        # Get Ingress URL
        $INGRESS_URL = kubectl get ingress solar-system -n $(KUBERNETES_NAMESPACE) -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        if (![string]::IsNullOrEmpty($INGRESS_URL)) {
          Write-Host "##vso[task.setvariable variable=INGRESS_URL;isOutput=true]$INGRESS_URL"
          Write-Host "Application also available via Ingress at: http://$INGRESS_URL" -ForegroundColor Green
        }
      displayName: 'Get Application URLs'
      name: 'GetURLs'

    # Health check
    - powershell: |
        Write-Host "Performing health check..." -ForegroundColor Green
        kubectl get pods -l app=solar-system -n $(KUBERNETES_NAMESPACE)
        
        # Port forward for testing
        Write-Host "Starting port forward for testing..." -ForegroundColor Yellow
        $portForward = Start-Process -FilePath "kubectl" -ArgumentList "port-forward", "service/solar-system", "8080:3000", "-n", "$(KUBERNETES_NAMESPACE)" -NoNewWindow -PassThru
        Start-Sleep 10
        
        # Test the application
        try {
          $response = Invoke-WebRequest -Uri "http://localhost:8080/" -UseBasicParsing -TimeoutSec 30
          Write-Host "‚úÖ Application health check passed!" -ForegroundColor Green
        } catch {
          Write-Host "‚ùå Application health check failed!" -ForegroundColor Red
          Write-Host "Error: $($_.Exception.Message)" -ForegroundColor Red
          exit 1
        } finally {
          # Cleanup port forward
          if ($portForward -and !$portForward.HasExited) {
            Stop-Process -Id $portForward.Id -Force
          }
        }
      displayName: 'Health Check'

    # Display deployment summary
    - powershell: |
        Write-Host "==========================================`nüöÄ DEPLOYMENT SUMMARY`n==========================================" -ForegroundColor Cyan
        Write-Host "Cluster: $(EKS_CLUSTER_NAME)" -ForegroundColor White
        Write-Host "Region: $(AWS_REGION)" -ForegroundColor White
        Write-Host "Namespace: $(KUBERNETES_NAMESPACE)" -ForegroundColor White
        Write-Host "Image: $(DOCKER_IMAGE)" -ForegroundColor White
        Write-Host ""
        Write-Host "üìã Deployed Resources:" -ForegroundColor Yellow
        kubectl get deployment,service,ingress -l app=solar-system -n $(KUBERNETES_NAMESPACE)
        Write-Host ""
        Write-Host "üåê Access URLs:" -ForegroundColor Yellow
        $loadBalancerURL = kubectl get service solar-system -n $(KUBERNETES_NAMESPACE) -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        if (![string]::IsNullOrEmpty($loadBalancerURL)) {
          Write-Host "LoadBalancer: http://$loadBalancerURL" -ForegroundColor Green
        }
        $ingressURL = kubectl get ingress solar-system -n $(KUBERNETES_NAMESPACE) -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        if (![string]::IsNullOrEmpty($ingressURL)) {
          Write-Host "Ingress: http://$ingressURL" -ForegroundColor Green
        }
        Write-Host ""
        Write-Host "‚úÖ Deployment completed successfully!" -ForegroundColor Green
      displayName: 'Deployment Summary'
